"""
Django settings for Sadaqa project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-rm5fm6d&@iqxzo733+-l9n=x3gir1i((l7@4qdg-*4kain9+qi'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Local apps
    #added local apps first for best practice
    "users.apps.UsersConfig",
    "projects.apps.ProjectsConfig",
    # Django core apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",  # Added sites framework
    "phonenumber_field",  # Adds phone number validation and formatting.
    "django_countries",  # Simplifies country dropdowns and data storage (e.g., "EG" for Egypt).
    # need to install pip install django-allauth to use the apps below
    "allauth",  # Core library for authentication (logins, signups)
    "allauth.account",  # Handles email/password-based accounts
    "allauth.socialaccount",  # Manages social media logins (Facebook, Google, etc.)
    "allauth.socialaccount.providers.facebook",  # Adds Facebook login support
    "django_registration",  # package for Registers users; manages accounts.
    "crispy_forms",
    "crispy_bootstrap5",
    'engagement.apps.EngagementConfig',
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

SOCIALACCOUNT_PROVIDERS = {
    "facebook": {  # Configure Facebook login
        "APP": {  # Link to your Facebook app
            "client_id": "YOUR_FACEBOOK_APP_ID",  # Your Facebook app’s public ID
            "secret": "YOUR_FACEBOOK_APP_SECRET",  # Your Facebook app’s private key
            "scope": "email",  # Ask Facebook for the user’s email address
        }
    }
}
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    
    # Add allauth's middleware here
    "allauth.account.middleware.AccountMiddleware",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",  # Default Django backend
    "allauth.account.auth_backends.AuthenticationBackend",  # AllAuth backend
]

# Sites Framework (if using social auth or flatpages)
SITE_ID = 1

# Email settings (for testing)
EMAIL_BACKEND = (
    "django.core.mail.backends.console.EmailBackend"  # Emails print to terminal
)

# Configure email verification
# Force users to verify email before logging in
ACCOUNT_EMAIL_VERIFICATION = "mandatory"  # Block login until email is confirmed
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1  # Activation link expires in 24 hours
ACCOUNT_LOGIN_METHODS = {"email"}
# The asterisk * means the field is required.
ACCOUNT_SIGNUP_FIELDS = ["email*", "username*", "password1*", "password2*"] 

PHONENUMBER_DEFAULT_REGION = "EG"
ACCOUNT_ADAPTER = "users.adapters.CustomAccountAdapter"

ACCOUNT_FORMS = {
    "signup": "users.forms.CustomSignupForm",
}

ROOT_URLCONF = 'Sadaqa.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),  # For project-wide base.html
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = 'Sadaqa.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "funding",
        "USER": "postgres",
        "PASSWORD": "123",
        "HOST": "localhost",
        "PORT": "5432",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# STATICFILES_DIRS = [BASE_DIR / "static"]  # if you have a static folder
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = "users.CustomUser"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Authentication
LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "/"  # Where users go after successful login
LOGOUT_REDIRECT_URL = "login"  # Redundant with next_page but safe
